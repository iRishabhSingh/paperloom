generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String        @id @default(uuid())
  role                String        @default("USER")
  email               String        @unique
  username            String        @unique
  firstName           String
  middleName          String?
  lastName            String
  name                String        @default("")
  country             String?
  isoCode             String?
  phone               String?
  passwordHash        String
  emailVerified       Boolean       @default(false)
  twoFAEnabled        Boolean       @default(false)
  twoFASecret         String?

  darkMode            DarkMode      @default(AUTO)
  contrastMode        ContrastMode  @default(BASIC)
  theme               Theme         @default(CLASSIC)

  profileImageUrl     String?
  profileImageKey     String?
  profileImageName    String?
  profileImageSize    Int?
  profileImageType    String?
  profileImageHash    String?

  status              UserStatus    @default(OFFLINE)
  accountStatus       AccountStatus @default(ACTIVE)

  region              String
  shardKey            String?

  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  uploadedPdfs        PDF[]         @relation("UserUploads")
  sharedAccess        SharedUser[]
  groupMessages       GroupMessage[]
  notifications       Notification[] @relation("UserToNotification")
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  ONLINE
  OFFLINE
  AWAY
  DO_NOT_DISTURB
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
  DISABLED
  DELETED
}

enum ContrastMode {
  BASIC
  MEDIUM
  HIGH
}

enum DarkMode {
  OFF
  ON
  AUTO
}

enum Theme {
  CLASSIC
}

enum SharedStatus {
  PENDING
  ACCEPTED
}

model PDF {
  id             String          @id @default(uuid())
  title          String
  fileName       String
  fileSize       Int
  fileType       String
  fileKey        String
  ufsUrl         String
  fileHash       String
  ownerId        String
  owner          User            @relation("UserUploads", fields: [ownerId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?

  sharedUsers    SharedUser[]
  groupMessages  GroupMessage[]
  notifications  Notification[]  @relation("PDFToNotification")
  publicShares   PublicShare[]

  @@index([ownerId])
  @@index([createdAt])
}

model SharedUser {
  id         String       @id @default(uuid())
  pdfId      String
  pdf        PDF          @relation(fields: [pdfId], references: [id])
  userId     String
  user       User         @relation(fields: [userId], references: [id])
  status     SharedStatus
  canReshare Boolean      @default(false)
  createdAt  DateTime     @default(now())
  acceptedAt DateTime?
}

model GroupMessage {
  id         String   @id @default(uuid())
  content    String
  pdfId      String
  pdf        PDF      @relation(fields: [pdfId], references: [id])
  senderId   String?
  sender     User?    @relation(fields: [senderId], references: [id])
  guestName  String?
  guestEmail String?
  createdAt  DateTime @default(now())

  @@index([pdfId])
  @@index([createdAt])
}

model Notification {
  id          String   @id @default(uuid())
  type        NotificationType
  message     String
  userId      String
  user        User     @relation("UserToNotification", fields: [userId], references: [id])
  pdfId       String?
  pdf         PDF?     @relation("PDFToNotification", fields: [pdfId], references: [id])
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([userId, read])
  @@index([createdAt])
}

enum NotificationType {
  NEW_COMMENT
  FILE_SHARED
  ACCESS_REQUEST
  ACCESS_GRANTED
}

model PublicShare {
  id        String   @id @default(uuid())
  pdfId     String
  pdf       PDF      @relation(fields: [pdfId], references: [id])
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([token])
}
